// DEV.FINANCE APP.JS

// Object responsible for storing the functions that are related with the transactions (calculus, adding, removing).
const transaction = {
  all: [],
  add: transact => {
    transaction.all.push(transact)
    app.reload()
  },
  remove: transactId => {
    transaction.all.splice(transactId, 1)
    app.reload()
  },
  incomes: () => {
    let incomes = 0
    const filteredIncomes = transaction.all
      .map(transaction => transaction.amount)
      .filter(transaction => transaction > 0)

    filteredIncomes.forEach(income => (incomes += income))
    
    return incomes
  },
  expenses: () => {
    let expenses = 0
    const filteredExpenses = transaction.all
      .map(transaction => transaction.amount)
      .filter(transaction => transaction < 0)

    filteredExpenses.forEach(expense => (expenses += expense))
    return expenses
  },
  total: () => {
    let total = 0
    const mappedTotal = transaction.all.map(transaction => transaction.amount)
    mappedTotal.forEach(transact => (total += transact))
    htmlManipulations.toggleGreenAndRedTheme(total)
    return total
  }
}

// Object responsible for storing the functions that manipulate data input and output visually in HTML.
const htmlManipulations = {
  // Function that opens/closes input modal
  toggleGreenAndRedTheme: (total) => {
    const header = document.querySelector(`header`)
    const totalCard = document.querySelector(`.card.total`)
    if (total >= 0) {
      totalCard.classList.remove(`red`)
      header.classList.remove(`red`)

      totalCard.classList.add(`green`)
      header.classList.add(`green`)
    } else {
      totalCard.classList.remove(`green`)
      header.classList.remove(`green`)

      totalCard.classList.add(`red`)
      header.classList.add(`red`)
    }
  },
  
  toggleModalOpen: modalId => {
    const modalOverlay = document.querySelector(`#${modalId}`)
    modalOverlay.classList.toggle(`open`)
  },

  // Function that generates html for the specified transaction in the specified index of the main data structure.
  innerHTMLTransaction: (transaction, index) => {
    const newTransaction = transaction[index]
    const cssClass = newTransaction.amount > 0 ? `income` : `expense`
    const amount = utilities.formatCurrency(newTransaction.amount)
    const html = `
    <tr>
      <td class="description">${newTransaction.description}</td>
      <td class="${cssClass}">${amount}</td>
      <td class="date">${newTransaction.date}</td>
      <td class="deleteTransaction" onclick="transaction.remove(${index})">
        <img src="./assets/icons/minus.svg" alt="" />
      </td>
    </tr>
    `

    return html
  },

  // Function that adds the html generated by the "htmlManipulations.innerHTMLTransaction()" function to the page.
  addTransaction: (transaction, index) => {
    const tr = document.createElement(`tr`)
    tr.classList.add(`transaction`)
    const tbody = document.querySelector(`tbody`)
    tr.innerHTML = htmlManipulations.innerHTMLTransaction(transaction, index)
    tr.id = index
    tbody.appendChild(tr)
  },

  // Function that updates data in the cards that show the total of incomes, expenses and balance.
  updateBalance: () => {
    const entry = document.querySelector(`.card.entry .value`)
    const out = document.querySelector(`.card.out .value`)
    const total = document.querySelector(`.card.total .value`)

    entry.innerHTML = utilities.formatCurrency(transaction.incomes())
    out.innerHTML = utilities.formatCurrency(transaction.expenses())
    total.innerHTML = utilities.formatCurrency(transaction.total())
  },

  // Function that clears all transactions from the html table.
  removeAllTransactions: () => {
    const allTransactions = document.querySelectorAll(`.transaction`)
    allTransactions.forEach(transact => transact.remove())
  }

  // Function that removes a specific transaction from the html by its id
}

// Object responsible for storing useful functions to be used many times inside other functions.
const utilities = {
  // Function that formats the amount value to the brazillian currency.
  formatCurrency: value => {
    return (value / 100).toLocaleString('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    })
  },
  formatAmount: amountValue => {
    return Number(amountValue) * 100
  },
  formatDate: dateValue => {
    return dateValue.replace(/(\d{4})-(\d{2})-(\d{2})/, `$3/$2/$1`)
  }
}
// Object responsible for storing functions related to the modal form.
const form = {
  getValues: () => {
    const values = {
      description: document.querySelector('input#descriptionInput').value,
      amount: document.querySelector('input#amountInput').value,
      date: document.querySelector('input#dateInput').value
    }
    return values
  },

  // Function that submits the form by executing all related functions in the right order.
  submit: event => {
    event.preventDefault()
    htmlManipulations.toggleModalOpen('modalOverlay')
    try {
      form.validateFields()
      const transaction = form.formatData()
      form.saveTransaction(transaction)
      form.clearFields()
    } catch (error) {
      alert(error.message)
    }
  },

  validateFields: () => {
    const { description, amount, date } = form.getValues()
    const someFieldsAreEmpty =
      description.trim() === '' ||
      amount.trim() === '' ||
      date.trim() === ''

    if (someFieldsAreEmpty) {
      throw new Error('All fields have to be filled.')
    }
  },

  formatData: () => {
    let { description, amount, date } = form.getValues()
    amount = utilities.formatAmount(amount)
    date = utilities.formatDate(date)
    return {
      description: description,
      amount: amount,
      date: date
    }
  },

  saveTransaction: transact => {
    transaction.add(transact)
  },

  clearFields: () => {
    const description = document.querySelector(`input#descriptionInput`)
    const amount = document.querySelector(`input#amountInput`)
    const date = document.querySelector(`input#dateInput`)
    description.value = ``
    amount.value = ``
    date.value = ``
  }
}

// Object that stores the two main function of the app.
const app = {
  // Function that initializes the application by adding all the transactions that are already stored to the html and updating balance.
  init: () => {
    transaction.all.forEach(obj => {
      htmlManipulations.addTransaction(
        transaction.all,
        transaction.all.indexOf(obj)
      )
    })

    htmlManipulations.updateBalance()
  },
  // Function that reloads the html by removing all transactions from the html and initializing the app again.
  reload: () => {
    htmlManipulations.removeAllTransactions()
    console.log(transaction.all)
    app.init()
  }
}

app.init()

